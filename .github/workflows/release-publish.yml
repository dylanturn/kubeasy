# This workflows will upload a Python Package using Twine when a release is created
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Package and publish new Kubeasy releases

on:
  release:
    types: [created]

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Get and set the Docker repo
      id: image
      run: |
        # Construct an image id and includes the repo.
        IMAGE_URL=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
        echo ::set-output name=path::$(echo IMAGE_URL | awk '{print tolower($0)}')

    - name: Get and set the release version
      id: release
      run: |
        # Strip git ref prefix from version.
        VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
        # Strip "v" prefix from tag name.
        [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
        # Set variables that can be used in other steps.
        echo ::set-output name=version::$(echo $VERSION | awk '{print tolower($0)}')

    - name: Install dependencies
      run: |
        pip install setuptools wheel twine requirementslib

    - name: Build and publish
      env:
        KUBEASY_VERSION: ${{ steps.release.outputs.version }}
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        python setup.py sdist bdist_wheel
        twine upload  dist/* --verbose

    - name: Build the Docker image
      run: docker build ./github_action --build-arg KUBEASY_VERSION=${{steps.image_vars.outputs.tag}} --tag ${{steps.image.outputs.path}}:${{steps.release.outputs.version}}

    - name: Login to github docker Registry
      run: docker login docker.pkg.github.com -u dylanturn -p ${{ secrets.GITHUB_TOKEN }}

    - name: Push the Docker image
      run: docker push ${{steps.image.outputs.path}}:${{steps.release.outputs.version}}
